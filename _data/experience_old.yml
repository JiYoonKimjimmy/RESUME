- layout: top
  name: 새로운 개발 패러다임 Reactive Programming 적용기,
  quote: >
    #ReactiveProgramming, #SpringWebflux, #SpringCloudGateway, #OpenAPI
  description: |
    2022년 코나카드 결제 플랫폼 시스템을 제휴 계약을 체결한 제휴 서비스에서 손쉬운 연동과 시스템 이용을 위해 `OpenAPI` 시스템 환경 구축 프로젝트를 시작하였고,
    `OpenAPI` 프로젝트에 참여하여 `API Gateway` 서버를 개발하였습니다.
    해당 `API Gateway` 서버의 역할은 `OpenAPI` 시스템의 중요한 부분을 담당하였습니다.

      - 호출 API Routing 처리
      - API 클라이언트의 권한 인가 및 인증
      - API Access Key 관리
      - API 암호화 Key 관리

    `API Gateway` 서버는 `Spring Cloud Gateway` 프레임워크 기반 새로운 **Reactive Programming** 이란 개발 패러다임을 접목한 개발을 진행하였습니다.
    <br><br>
    **Reactive Programming** 은 기존 선언적 프로그래밍 패러다임과는 다른 개발 방식으로 함수형 프로그래밍 개념부터 반응형 프로그래밍까지 학습을 필요하였고,
    팀원들과 짧은 **함수형/반응형 프로그래밍**과 **Spring Webflux**에 대해 스터디를 진행하면서 기초적인 지식부터 학습하고 함께 공유하였습니다.
    <br><br>
    `Reactor` 객체의 다양한 함수 사용 방법과 더불어 `React-stream` 기반의 `Thread` 관리 방식 등 개발 과정에서 쉽게 넘어가는 일이 없었지만,
    팀원들과 하나씩 해결가면서 개발 요구 사항을 충족하는 `API Gateway` 서버를 끝내 구축할 수 있었습니다.
    그렇게 개발된 `API Gateway` 는 기존 `Spring Cloud Zuul` 기반의 `API Gateway` 에 비해 성능 차이 효과를 확인할 수 있었습니다.
    <br><br>
    함수형 프로그래밍이라는 새로운 개발 패러다임 개발은 익숙하지 않고 힘들었던 점은 분명하였지만,
    개발 과정에서 강조되는 **순수 함수**에 대해 '왜 순수 함수가 더 `Side-effect` 부수 효과를 방지할 수 있는가?',
    **불변성 보장**과 같은 장점이 개발 유지 보수에 어떠한 이점을 가져올 수 있었는지 알게 되었습니다.
    <br><br>
    해당 프로젝트를 진행하면서 개발 외적으로, 새로운 시스템을 구축하는 과정에서 서비스 용도에 맞는 기술 스펙을 선정하는 과정과
    새로운 기술에 대해서는 첫 단추부터 차근차근 채워가는 것이 얼마나 중요한지를 깨닫게 되었습니다.
    또한 성공적인 협업을 위해서 함께 일하는 동료들과 학습해가는 방식과 지식 공유 등 함께 성장할 수 있는 개발의 즐거움도 느끼게 되었습니다.

- layout: top
  name: 주소연계정보 연동 시스템 Elasticsearch 도입기,
  quote: >
    #Elasticseach, #주소연계정보연동
  description: |
    - 주소연계정보 연동 시스템 간략 소개
      - 국가 도로명주소 사이트의 주소연계정보 일변동분 데이터 연동
      - 기존 수동 데이터 다운로드 & Oracle 데이터 적재 방식의 시스템 고도화 필요
      - 일 Batch 시스템 데이터 다운로드 및 Elasticsearch 데이터 파이프라인 구축
      - 비정형 주소 검색어 정규화 및 주소 검색하여 해당 주소의 좌표 정보 제공
    - 서비스 시스템 아키텍처
      - `Spring Batch` 활용한 `ADS` 주소연계정보 일변동분 다운로드 시스템 구축
      -  다운로드 파일 `NAS` 파일 서버 저장
      - `Filebeat` 을 통한 파일 저장 이벤트 수신 후 `Logstash` 프로세스 실행
      - `Logstash` 주소 정보 분석 및 데이터 가공 처리하여 `Elasticsearch` 데이터 적재
      - `ADS` 데이터 파이프라인 : `Spring Batch > ADS 데이터 수집 > NAS 디렉토리 파일 저장 > Filebeat > Logstash > Elasticsearch`
    - Elasticsearch 운영 환경 구성
      - 하나의 서버, 3개의 `ES` 노드 구축
    - Elasticsearch 인덱스 설계  
      - Index 인덱스 구성
        - 도로명 / 지번 / 관련-지번 3가지 주소 정보 별도 필드 구성
          - 각 주소에 대한 정확한 검색을 위한 분리 필요
          - 모든 주소를 알 수 없으며 질의어의 건물명 또는 기타 검색어 포함된 경우, 원하는 결과 조회 실패 우려
        - 질의 필수 정보에 대해서만 애널라이저 적용
          - 부가 정보는 단순 정보 제공용으로 활용
      - Analyzer 애널라이저 구성
        - 질의어에 대한 데이터 정규화를 위한 애널라이저 구성
        - 도로명 / 지번 / 관련-지번 주소 규칙에 맞는 정규화
          - `pattern_replace` 캐릭터 필터 적용으로 각 규칙에 맞는 **정규식** 활용
          - 도로명 정규화 : `은행로 3 번길 > 은행로3번길` 변환
          - 지번 정규화 : `영등포구 은행 1 동 > 영등포구 은행1동` 변환
          - 관련-지번 정규화 : `영등포구 은행1.2동 > 영등포구 은행동 은행1동 은행2동` 변환
    - Elasticsearch 질의 Query
      - 분리된 필드 하나의 Query 로 검색
        - 지번 & 관련-지번 주소는 검색어 자체 구분이 불가하기 때문에 `OR` 조건으로 하나의 Query 검색 필요
        - `Should Query` 활용한 Query 작성
    - 프로젝트 트러블 슈팅
      - 데이터 분석에 대한 어려움
        - 다양한 규칙에 어긋나는 예외 데이터에 대한 정규화 규칙 확정 어려움
        - 최대한 정규식을 활용한 복잡한 데이터 가공 로직 없이 데이터 정규화 진행
          - 일부 데이터 불일치에 대한 리스크 감수
      - ES 검색 엔진의 결과값에 대한 고찰
        - 검색 엔진은 최대한 유사한 결과를 많이 조회한다는 것은 하나의 큰 성능
        - 하지만, 시군구 순서에 맞는 정확한 주소 정보 결과가 아닌 경우, 별도 검색어 <> 결과값에 대한 일치 여부 확인 로직 필요
      - RDB 와 다른 NoSQL 인덱스 설계 어려움
        - 계층 구조의 도큐먼트에 대한 관계 매핑 설계에 대한 다양한 방식 및 리스크 확인
        - NoSQL 특성 상 계층 구조보단 최대한 단일 도큐먼트에 데이터 모두 저장할 수 있는 방향 결정
      - 도로명 & 지번 & 관련-지번 주소 분리와 검색 Query 개발 어려움
        - 다른 지역이지만 동일하거나 비슷한 지명으로 정확한 결과 조회 어려움
        - 최대한 검색 질의어의 순서와 `Term` 일치 순서에 따른 결과 조회 처리를 위한 노력 투자
    - 프로젝트 성능
      - 도로명 검색 성공률 : 99.8% (기존: 89.2%)
      - 지번 & 관련-지번 검색 성공률 : 81.3% (기존: 73.3%)
      - 평균 1회 주소 검색 소요 시간 : 6ms (기존: 18ms)

- layout: top
  name: 회원 본인인증 정보 임시 저장을 위한 Cache 처리,
  quote: >
    #Cache, #Redis, #SpringDataRedis
  description: |
    - 회원 본인인증 기능 개선 사유
      - 회원 본인인증을 위한 통신사 인증 과정 중 에러 상황에 대한 Tracking 위한 개선
      - 본인인증 요청 정보에 대한 히스토리 관리를 위해 Cache 처리 추가
    - 서비스 아키텍처
      - 
    - Redis 선택 이유
      - 각 서버 인스턴스 모두 Cache 공유가 필요한 Global Cache 선택
      - 
    - Spring Data Redis 활용 사유
    - Cache 처리 구현 방식
    - Spring Data Redis 의 Phantom copy 관련 내용
    - 프로젝트 트러블 슈팅
