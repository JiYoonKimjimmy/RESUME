- layout: top
  name: 새로운 개발 패러다임 Reactive Programming 적용기,
  quote: >
    #ReactiveProgramming, #SpringWebflux, #SpringCloudGateway, #OpenAPI
  description: |
    2022년 코나카드 결제 플랫폼 시스템을 제휴 계약을 체결한 제휴 서비스에서 손쉬운 연동과 시스템 이용을 위해 `OpenAPI` 시스템 환경 구축 프로젝트를 시작하였고,
    `OpenAPI` 프로젝트에 참여하여 `API Gateway` 서버를 개발하였습니다.
    해당 `API Gateway` 서버의 역할은 `OpenAPI` 시스템의 중요한 부분을 담당하였습니다.

      - 호출 API Routing 처리
      - API 클라이언트의 권한 인가 및 인증
      - API Access Key 관리
      - API 암호화 Key 관리

    `API Gateway` 서버는 `Spring Cloud Gateway` 프레임워크 기반 새로운 **Reactive Programming** 이란 개발 패러다임을 접목한 개발을 진행하였습니다.
    <br><br>
    **Reactive Programming** 은 기존 선언적 프로그래밍 패러다임과는 다른 개발 방식으로 함수형 프로그래밍 개념부터 반응형 프로그래밍까지 학습을 필요하였고,
    팀원들과 짧은 **함수형/반응형 프로그래밍**과 **Spring Webflux**에 대해 스터디를 진행하면서 기초적인 지식부터 학습하고 함께 공유하였습니다.
    <br><br>
    `Reactor` 객체의 다양한 함수 사용 방법과 더불어 `React-stream` 기반의 `Thread` 관리 방식 등 개발 과정에서 쉽게 넘어가는 일이 없었지만,
    팀원들과 하나씩 해결가면서 개발 요구 사항을 충족하는 `API Gateway` 서버를 끝내 구축할 수 있었습니다.
    그렇게 개발된 `API Gateway` 는 기존 `Spring Cloud Zuul` 기반의 `API Gateway` 에 비해 성능 차이 효과를 확인할 수 있었습니다.
    <br><br>
    함수형 프로그래밍이라는 새로운 개발 패러다임 개발은 익숙하지 않고 힘들었던 점은 분명하였지만,
    개발 과정에서 강조되는 **순수 함수**에 대해 '왜 순수 함수가 더 `Side-effect` 부수 효과를 방지할 수 있는가?',
    **불변성 보장**과 같은 장점이 개발 유지 보수에 어떠한 이점을 가져올 수 있었는지 알게 되었습니다.
    <br><br>
    해당 프로젝트를 진행하면서 개발 외적으로, 새로운 시스템을 구축하는 과정에서 서비스 용도에 맞는 기술 스펙을 선정하는 과정과
    새로운 기술에 대해서는 첫 단추부터 차근차근 채워가는 것이 얼마나 중요한지를 깨닫게 되었습니다.
    또한 성공적인 협업을 위해서 함께 일하는 동료들과 학습해가는 방식과 지식 공유 등 함께 성장할 수 있는 개발의 즐거움도 느끼게 되었습니다.

- layout: top-middle
  name: 주소 데이터 수집 자동화를 위한 Elasticsearch 도입기
  quote: >
      #Elasticseach, #ELK, #주소연계정보연동
  description: |
    **[레거시 시스템의 문제점]**
    
    **주소 데이터 수집 시스템**은 매입사별 가맹점의 주소 기반 좌표 정보 수집을 위해 **주소정보누리집의 네비게이션DB** 데이터 수동으로 수집하고 있었습니다.

    데이터를 수동으로 수집하는 과정에서 변동분 데이터에 대한 즉각적인 반영이 이루어지지 않아 각 가맹점에 대한 좌표 정보가 불일치하는 이슈가 발생하였습니다.

    이를 개선하기 위해 먼저 주소 데이터 수집 시스템을 자동화하고, 
    자동화된 주소 데이터 수집 시스템을 통해 수집된 데이터는 **Elasticsearch 도입**하여 시스템 고도화 프로젝트를 진행하게 되었습니다.

    **[주소 데이터 수집 자동화 기능 구성]**

    먼저 주소정보누리집 사이트에서 1일 1회 제공되는 일변동분 데이터를 Batch 프로그램을 통해 파일 다운로드하였고, 
    Filebeat > Logstash > Elasticsearch 순서로 **자동화 수집 & 데이터 처리 & 저장하는 파이프라인**을 구성하였습니다.

    하지만, 매입사에서 전달되는 가맹점 주소 정보는 사용자 입력을 통한 잘못된 주소도 포함되었기 때문에, 단순 검색어 전문 검색 질의를 한다면 검색율이 떨어지는 걸 발견할 수 있었습니다.

    자동화 수집된 주소 데이터를 정형화되지 않는 주소 문자열로 검색을 하더라도, 최대한 일치한 주소 정보를 조회할 수 있도록 **Elasticsearch 질의 처리가 필요하다 판단하였습니다.**
    
    **주소정보누리집 가이드라인**을 참고하여 도로명 & 지번 주소에 대한 체계를 정리하였고, 정리된 체계 기준으로 비정형적인 검색어를 최대한 정규화시킬 수 있도록 **애널라이저**를 구성하였습니다.

    - 도로명 주소 체계화 캐릭터 필터 구성
    - 지번 주소 체계화 캐릭터 필터 구성
    - 관련-지번 주소 체계화 캐릭터 필터 구성
    - 주소 동의어 토큰 필터 구성
    
    인덱스에 애널라이저 적용하여 검색어는 데이터 가공 과정을 거쳐 수집된 주소 정보를 질의하고, 질의 결과값과 검색어의 문자열 일치율 비교를 통해 질의 성공 여부를 확인하도록 서비스 로직을 적용하였습니다.
    
    **[향상된 주소 검색 결과]**

    **Elasticsearch** 에 저장되는 주소 데이터 기반 질의 결과는 기존 RDBMS 기반 시스템 대비 향상된 성능과 검색 성공율을 보여주었습니다.

    - 도로명 검색 성공율 : 89.2% → **99.8%**
    - 지번 & 관련-지번 검색 성공율 : 73.3% → **81.3%**
    - 평균 1회 주소 검색 소요 시간 : 18ms → **6ms**

    해당 프로젝트를 통해 다시 한번 팀원들과 함께 새로운 기술을 사용하기 위한 스터디와 실전 업무를 통해 더욱 다양한 시스템을 운영하는 데 필요한 지식을 쌓을 수 있었습니다.

    그리고 주소라는 도메인처럼 이미 알고 있던 흔한 도메인이라도 관련 상세 지식을 습득하기 위한 방식과 노하우를 쌓게 되었고, 특히 애널라이저를 구성하기 위한 데이터 분석 과정에서는
    힘들고 지루한 싸움이었지만, 많은 시행착오가 값진 결과물이 된 것을 느끼게 되었습니다.