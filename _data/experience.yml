- layout: top-middle
  name: 가상 순번 대기 시스템 신규 개발
  quote: 코나아이, 가상순번대기시스템, 대기열솔루션내재화
  description: |
    **[성과 요약]**
    - 외부 솔루션 장애를 극복하고, 자체 개발로 **최소 100K 동시접속 트래픽**을 안정적으로 제어하는 시스템 구축
    - 매월 1일 대규모 이벤트 트래픽에도 **장애 0건**, 안정적 서비스 제공
    - 멀티 인스턴스(10ea) 기준 **분당 최대 46K 요청**, 단일 인스턴스 **최대 TPS 600**, **최대 응답시간 3ms** 달성

    **[주요 역할]**
    - 프로젝트 오너로서 시스템 설계, 개발, 성능/기능 테스트, 배포 등 전 과정 주도
    - Redis Sorted-Set, Sliding-Window, Lua-Script 등 오픈소스 기반 대기열/순번 관리 로직 설계 및 구현
    - HTTP Long-Term Polling, Polling 주기 최적화 등 트래픽 분산 처리 구조 설계
    - 대기열 모니터링, 토큰 만료 자동화 등 운영 안정성 강화

    **[문제 상황 및 원인]**
    - 매월 1일 지역화폐 충전 이벤트 등 대규모 트래픽 진입 시 외부 대기 솔루션의 잦은 장애 발생
    - 외부 솔루션 의존으로 인한 서비스 신뢰성 저하 및 장애 대응 한계
    - 단시간 급증 트래픽 요청에 대한 대응 한계

    **[해결 방안 및 구현]**
    - 자체 가상 순번 대기 시스템 설계 및 개발
    - Redis Sorted-Set과 Sliding-Window 알고리즘을 활용한 대기열/순번 관리
    - Lua-Script로 트랜잭션 처리 최적화
    - HTTP Long-Term Polling 방식과 Polling 주기 서버 계산으로 트래픽 분산
    - 1분 이상 Polling 없는 토큰 자동 만료, 5초마다 대기열 상태 모니터링 등 운영 자동화
    - AWS 클라우드 인프라 활용한 Auto-Scailing 환경 구성

    **[성과]**
    - 대규모 트래픽 상황에도 장애 없이 안정적 서비스 제공
    - 외부 솔루션 대비 성능·신뢰성·운영 효율성 대폭 향상

- layout: top-middle
  name: 회원 약관 목록 조회 서비스 지연 발생 장애 대응
  quote: 코나아이, 장애분석및대응, 대규모트래픽대응, DB부하분산처리
  description: |
    **[성과 요약]**
    - 대규모 트래픽(분당 8만 명) 상황에서 회원 약관 목록 조회 API의 최대 응답시간을 60s → 1s 로 단축, 장애 발생 시에도 무중단 서비스 제공

    **[주요 역할]**
    - 장애 원인 분석, 캐싱 구조 설계, AOP 기반 캐시 무효화, 장애 복구 로직 구현

    **[문제 상황 및 원인]**
    - 매월 1일 지역화폐 충전 혜택 지급 시 동시접속 폭증으로 오라클DB 부하 및 쿼리 지연 발생
      - TPS: 최대 7000+ / 분당 접속자수 : 최대 80000+
    - 약관 목록, 버전, 컨텐츠 등 복잡한 테이블 구조와 다중 Join 으로 인한 쿼리 튜닝 한계

    **[해결 방안 및 구현]**
    - 약관 목록 조회 결과 Redis 캐싱을 통해 DB 부하 분산
    - 약관 변경(등록/수정/삭제) 시 Spring AOP 기반 Custom Annotation 활용해 캐시 무효화 자동화
    - 약관 변경 후 최초 1회 조회만 DB 접근, 이후 캐시 활용으로 지연 방지
    - Spring Data Redis 의 CacheErrorHandler 커스터마이징하여 Redis 장애(RedisCommandTimeout) 발생 시 DB Fallback 처리

    **[성과]**
    - 트래픽 폭증 시 최대 응답시간 **60s → 1s** / 평균 **500ms** 이하로 개선
    - Redis 장애 발생 시에도 서비스 중단 없이 안정적 응답 제공

- layout: top-middle
  name: 가맹점 연동 Batch 시스템 성능 최적화
  quote: 코나아이, 대용량데이터처리, SpringBatch최적화
  description: |
    **[성과 요약]**
    - 대용량 가맹점 데이터 연동 Batch 처리 속도를 수십 배 이상 개선, 운영 효율성 및 시스템 안정성 대폭 향상

    **[주요 역할]**
    - 성능 병목 분석, 병렬 처리 구조 설계 및 구현, 비동기 API 요청 로직 구현

    **[문제 상황 및 원인]**
    - 시중 카드사 가맹점 연동 Batch 시스템에서 대용량 데이터 처리 시 성능 이슈
      - 1K 처리 소요 시간 : 약 43초
      - 6M 처리 소요 시간 : 약 2~3일
    - 데이터 처리 과정이 Sync & Blocking 방식으로 동작하여 병목 발생
      - 가맹점 연동 처리 과정 : 1. 가맹점 데이터 신규/변경 여부 확인 → 2. 가맹점 부가 정보 조회 → 3. 가맹점 정보 DB 저장 → 4. 가맹점 데이터 변경 Event API 요청
      - 가맹점 연동 전문 파일 데이터 1건씩 읽으면서 Sync & Blocking 방식으로 처리

    **[해결 방안 및 구현]**
    - Spring Batch Partitioner 적용으로 데이터 파티셔닝 및 Step 병렬 처리 구조 도입
      - 전문 데이터 10K 이상 요청 시, 가용 스레드의 2/3만큼 스레드풀 동적 할당
    - 가맹점 데이터 변경 Event API 연동을 WebClient 기반 Async/Non-Blocking 방식으로 전환
      - StepListener 활용해 Chunk 단위 처리 후 비동기 API 호출로 처리 효율 극대화

    **[성과]**
    - 테스트 데이터 10K 처리 기준
      - 기존 시스템 소요 시간 : **약 4300초**
      - 개선 시스템 소요 시간 : **약 24초** (Thread-Pool: 12개)
    - 시스템 리소스 효율적 사용 및 운영 안정성 확보

- layout: top-middle
  name: 주소정보누리집 데이터 수집 시스템 자동화
  quote: 코나아이, Elasticsearch도입, 데이터수집자동화, 비정형데이터검색성능향상
  description: |
    **[성과 요약]**
    - 주소 데이터 수집 및 검색 시스템 자동화로 검색 성공율 99.8%, 평균 검색 속도 6ms 달성

    **[주요 역할]**
    - 데이터 파이프라인 설계, Elasticsearch 인덱스 및 애널라이저 구축, 검색 로직 개선 등 전 과정 주도 개발 진행

    **[문제 상황 및 원인]**
    - 결제 가능 가맹점 좌표 정보 수집을 위해 주소정보누리집 DB를 수동으로 관리, 변동분 반영 지연 및 좌표 불일치 이슈 발생

    **[해결 방안 및 구현]**
    - Filebeat > Logstash > Elasticsearch 기반 자동화 파이프라인 구축으로 일변동분 데이터 실시간 수집 및 저장
    - 비정형 주소 입력에도 높은 검색 성공율을 위해 도로명/지번/동의어 등 다양한 ES 캐릭터-필터와 토큰-필터로 애널라이저 설계
    - Elasticsearch 질의 결과와 입력값의 문자열 일치율 비교 로직 도입으로 검색 정확도 향상

    **[성과]**
    - 도로명 검색 성공율: **89.2% → 99.8%**
    - 지번/관련-지번 검색 성공율: **73.3% → 81.3%**
    - 평균 1회 주소 검색 소요 시간: **18ms → 6ms**
    - 데이터 수집 및 반영 자동화로 운영 효율성 및 데이터 신뢰성 대폭 향상

    **[기타]**
    - 주도적인 Elasticsearch 관련 팀 스터디 및 데이터 분석 등 다양한 팀 역량 강화 일조