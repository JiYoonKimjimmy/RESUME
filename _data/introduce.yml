- layout: top
  name: 새로운 개발 패러다임 Reactive Programming 적용기,
  quote: >
    #ReactiveProgramming, #SpringWebflux, #SpringCloudGateway, #OpenAPI
  description: |
    2022년 코나카드 결제 플랫폼 시스템을 제휴 계약을 체결한 제휴 서비스에서 손쉬운 연동과 시스템 이용을 위해 `OpenAPI` 시스템 환경 구축 프로젝트를 시작하였고,
    `OpenAPI` 프로젝트에 참여하여 `API Gateway` 서버를 개발하였습니다.
    해당 `API Gateway` 서버의 역할은 `OpenAPI` 시스템의 중요한 부분을 담당하였습니다.

      - 호출 API Routing 처리
      - API 클라이언트의 권한 인가 및 인증
      - API Access Key 관리
      - API 암호화 Key 관리

    `API Gateway` 서버는 `Spring Cloud Gateway` 프레임워크 기반 새로운 **Reactive Programming** 이란 개발 패러다임을 접목한 개발을 진행하였습니다.
    <br><br>
    **Reactive Programming** 은 기존 선언적 프로그래밍 패러다임과는 다른 개발 방식으로 함수형 프로그래밍 개념부터 반응형 프로그래밍까지 학습을 필요하였고,
    팀원들과 짧은 **함수형/반응형 프로그래밍**과 **Spring Webflux**에 대해 스터디를 진행하면서 기초적인 지식부터 학습하고 함께 공유하였습니다.
    <br><br>
    `Reactor` 객체의 다양한 함수 사용 방법과 더불어 `React-stream` 기반의 `Thread` 관리 방식 등 개발 과정에서 쉽게 넘어가는 일이 없었지만,
    팀원들과 하나씩 해결가면서 개발 요구 사항을 충족하는 `API Gateway` 서버를 끝내 구축할 수 있었습니다.
    그렇게 개발된 `API Gateway` 는 기존 `Spring Cloud Zuul` 기반의 `API Gateway` 에 비해 성능 차이 효과를 확인할 수 있었습니다.
    <br><br>
    함수형 프로그래밍이라는 새로운 개발 패러다임 개발은 익숙하지 않고 힘들었던 점은 분명하였지만,
    개발 과정에서 강조되는 **순수 함수**에 대해 '왜 순수 함수가 더 `Side-effect` 부수 효과를 방지할 수 있는가?',
    **불변성 보장**과 같은 장점이 개발 유지 보수에 어떠한 이점을 가져올 수 있었는지 알게 되었습니다.
    <br><br>
    해당 프로젝트를 진행하면서 개발 외적으로, 새로운 시스템을 구축하는 과정에서 서비스 용도에 맞는 기술 스펙을 선정하는 과정과
    새로운 기술에 대해서는 첫 단추부터 차근차근 채워가는 것이 얼마나 중요한지를 깨닫게 되었습니다.
    또한 성공적인 협업을 위해서 함께 일하는 동료들과 학습해가는 방식과 지식 공유 등 함께 성장할 수 있는 개발의 즐거움도 느끼게 되었습니다.

- layout: top
  name: 주소연계정보 연동 시스템 Elasticsearch 도입기,
  quote: >
    #Elasticseach, #주소연계정보연동
  description: |
    - 주소연계정보 연동 시스템 간략 소개
    주소연계정보를 연동하고 수집하여, 결제 매입사에서 전달된 전국 가맹점 주소 기반으로 해당 가맹점의 위치 좌표 제공 목적의 주소연계정보 연동 시스템을 구축하였습니다.
    <br>
    주소라는 정보 특성은 정형적이면서도 비정혁적인 데이터라 생각됩니다. 도로명주소 체계의 정해진 규칙을 있지만, 너무 많은 예외 사항들이 있기에 정형적이지만 비정형적인 데이터라 분석하였습니다.
    그리고 하나의 검색 키워드에 일치하거나 비슷한 주소 정보를 찾아서 정보 제공하는 것이 좋은 주소 검색 서비스라고 정의하였습니다.
    
    <br><br>

    - 서비스 시스템 아키텍처
    위와 같이 분석하고 정의한 바로 주소연계정보 수집 데이터를 관계형 데이터베이스가 아닌 NoSQL 데이터베이스를 제공하면 좋겠다는 결론을 내리고, 많은 시스템들 중에
    비정형 데이터 저장이 가능하면서도 분산 처리, 다양한 검색, 통계 기능을 제공하는 **Elasticsearch** 를 선택하게 되었습니다.
    <br>
    Spring Batch 서비스를 통해 매일 변동되는 주소 데이터 파일을 특정 디렉토리에 저장하여, **Filebeat**를 통해 자동 수집하여 **Logstash** 로 전달하여
    `Fleet` 형식의 데이터를 `Json` 형식으로 변환하여 `Elasticsearch` 로 저장할 수 있도록 `Pipeline 파이프라인` 을 구축하였습니다.
    <br>
    `Spring Batch > ADS 데이터 수집 > NAS 디렉토리 파일 저장 > Filebeat > Logstash > Elasticsearch`
    
    <br><br>

    - Elasticsearch 인프라 환경 구성
    
    <br><br>

    - Elasticsearch 주소정보 인덱스 설계
    한국 주소 정보는 **도로명 주소**와 **지번 주소**로 나눠질 수 있습니다. 매입사에서 전달되는 가맹점의 주소 정보는 도로명 주소일 수도, 지번 주소일 수도 있기 때문에
    해당 프로젝트에서는 두가지 형식의 주소 정보를 모두 수집하고 정보 제공이 필수였습니다.
    <br>
    Elasticsearch 활용 시 중요한 점은 인덱스 설계였습니다. 데이터 검색 조건은 무엇인지 어떤 데이터 기준 검색 제공인지에 따라 인덱스 설계 방향이 정해졌습니다.
    <br>
    도로명과 지번 주소를 모두 검색 조건에 추가하기 위해 각각 별도 필드로 데이터를 분리하는 것이 좋을지, 하나의 필드에 모두 포함하는 건 어떨지 고민을 하고,
    두가지 방식에 대해 테스트 결과, 도로명과 지번 주소를 분리한 별도 필드로 저장하는 방식을 선택하였습니다.
    (추후 하나의 필드로 합치고, 애널라이저 고도화 고려)
    <br>
    그리고 Elasticsearch 에서 인덱스 설계만큼 중요한 것이 `Analyzer` 애널라이저 설계였습니다. 조회 조건의 데이터를 빠르고 정확한 검색을 위해 `Term` 텀을 분리하기 위한
    캐릭터 필터부터, 토크나이저, 토큰 필터까지 많은 기능을 실험해보고 테스트하여 원하는 수준의 애널라이저 구성을 위해 오랜 시간과 노력을 투자하였습니다.
    <br>
    특히 규칙에 맞지 않는 주소 데이터 조회를 위해 캐릭터 필터를 활용하여 주소 데이터 가공하는 과정에서 많은 시간이 필요하였습니다.
    <br>
    `여의대방로45길` 은 `~로` 문자열 & `45` 숫자 & `~길` 문자열 3개가 공백없이 구성된 주소 문자열이 도로명 규칙인데, `여의대방로 45 길` 과 같은 형식의 주소 조회 요청의
    처리를 위해서는 애널라이저에서 데이터 가공이 필요하였습니다. 이런 주소 형식에 대한 문제를 `patter_replace` 캐릭터 필터를 통해 정규식으로 데이터 분석 후 공백을 없애는
    필터를 추가하여 해결하였습니다.
    
    <br><br>
    
    - 주소 정보 조회 ES Query
    Elasticsearch 의 데이터 제공을 위한 설계와 구성이 완료되었다면, 이제 Elasticsearch 의 정보를 효율적인 성능을 가진 조회 Query 를 구성하는 것이 중요하였습니다.
    <br>
    분리된 도로명과 지번 주소를 정확하게 검색하기 위해 도로명 주소는 체계화된 정책이 있기 때문에 가맹점 주소가 도로명인지 지번주소인지 판별 후,
    도로명 또는 지번 주소를 구별하여 검색하는 ES Query 를 개발하였습니다.
    <br>
    하지만, 지번 주소에도 관련-지번 주소로 행정동에서 법정동으로 정책 변경으로 인한 주소의 변동도 있었기에, 지번 주소에는 관련-지번 주소도 함께 조회할 수 있도록
    `Shuld Query` 로 구성하였습니다. `Should Query` 는 다중 검색어를 `OR` 연산자로 데이터 검색해주기 때문입니다.
    <br>
    주소 데이터를 조회하는 것은 어렵지 않았지만, 최대한 검색어와 일치도가 높은 결과 추출하는 과정도 쉽진 않았습니다. 사람이 입력하는 주소 검색어는 다양한 형식과 더불어
    유효하지 않는 문자도 포함될 수 있기 때문입니다. 최대한 주소 정보를 기준으로 검색하기 위해 특수문자 제거, 건물명 제거하는 필터를 추가하고, 여러 번의 데이터 적합성 테스트를 
    실행하여 데이터를 비교하고 분석하는 과정을 반복하였습니다.
    <br>
    그 결과, 99% 의 데이터 검색율과 도로명 주소는 99% 이상, 지번 주소는 80% 이상의 주소 데이터 일치율을 확인하였습니다.

    <br><br>

    - 프로젝트 트러블 슈팅
      - 애널라이저 구성 어려움
      - RDB 와 다른 NoSQL 인덱스 설계 어려움
      - 도로명 & 지번 & 관련-지번 주소 분리와 검색 Query 개발 어려움

- layout: top
  name: 회원 본인인증 정보 임시 저장을 위한 Cache 처리,
  quote: >
    #Cache, #Redis, #SpringDataRedis
  description: |
    - 회원 본인인증 정보 임시 저장 사유
    - 서비스 아키텍처
    - Redis 선택 이유
    - Spring Data Redis 활용 사유
    - Cache 처리 구현 방식
    - Spring Data Redis 의 Phantom copy 관련 내용
    - 프로젝트 트러블 슈팅
